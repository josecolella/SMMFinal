/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package es.ugr.smm.internalWindow;

import java.awt.BorderLayout;
import java.awt.Component;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.media.CannotRealizeException;
import javax.media.NoPlayerException;
import java.io.File;

import javax.media.Format;
import javax.media.Manager;
import javax.media.MediaLocator;
import javax.media.Player;
import javax.media.PlugInManager;
import javax.media.Time;
import javax.media.format.AudioFormat;
import javax.swing.ImageIcon;

/**
 * VentanaInternaJMFPlayer representa una ventana interna {@link JInternalFrame}
 * que puede reproducir sonidos con extensión .mp3 y .wav. Además esta clase
 * puede reproducir video con extensión .avi. Un objeto VentanaInternaJMFPlayer
 * cambie en base al fichero que se abre. Si se abre un fichero un fichero de
 * sonido, se crea un reproductor de músico que proporciona los siguientes
 * botones.
 * <ul>
 * <li> Boton de Play </li>
 * <li> Boton de Pausa </li>
 * <li> Boton de Stop </li>
 * </ul>
 * Si se abre un fichero de video, se crea un reproductor con un panel que
 * proyecta el video. Además se proporcionan botones para controlar la
 * reproducción.
 * Finalmente, se pueden hacer capturas sobre el reproductor de video,
 * donde al final el usuario tendrá una ventana interna {@link jImageInternalWindow}
 *
 * @author Jose COlella
 * @version 1.0
 * @see jImageInternalWindow
 * @see Player
 * 
 */
public class VentanaInternaJMFPlayer extends javax.swing.JInternalFrame {

    //Tenemos un atributo que es el player
    private Player p;

    //Tenemos el constructor como privado ya que se crearán instancias
    //del {@link VentenaInternaJMFPlayer} usando un metodo. Esto emplea el
    //diseño de patron conocido como Factory method pattern
    private VentanaInternaJMFPlayer(File fileToReproduce) {
        initComponents();
        this.jPlayButton.setSelected(false);
        this.jPauseButton.setSelected(false);
        this.jStopButton.setSelected(false);
        this.setSize(300, 300);
        this.setTitle(fileToReproduce.getName());
        Format input1 = new AudioFormat(AudioFormat.MPEGLAYER3);
        Format input2 = new AudioFormat(AudioFormat.MPEG);
        Format output = new AudioFormat(AudioFormat.LINEAR);
        PlugInManager.addPlugIn(
                "com.sun.media.codec.audio.mp3.JavaDecoder",
                new Format[]{input1, input2},
                new Format[]{output},
                PlugInManager.CODEC);
        try {
            MediaLocator ml = new MediaLocator(fileToReproduce.toURI().toURL());
            p = Manager.createRealizedPlayer(new MediaLocator(fileToReproduce.toURI().toURL()));
            Component areaVisual = p.getVisualComponent();
            if (areaVisual != null) {
                add(areaVisual, BorderLayout.CENTER);
                Component panelControl = p.getControlPanelComponent();
                if (panelControl != null) {
                    this.add(panelControl, BorderLayout.SOUTH);
                }
                this.pack();
            }

        } catch (IOException ex) {
            p = null;
        } catch (NoPlayerException ex) {
            Logger.getLogger(VentanaInternaJMFPlayer.class.getName()).log(Level.SEVERE, null, ex);
        } catch (CannotRealizeException ex) {
            Logger.getLogger(VentanaInternaJMFPlayer.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    /**
     * Crea una instancia de {@link VentanaInternaJMFPlayer} que creará un
     * reproductor en base al fichero pasado.
     *
     * @param f Fichero a leer que será de sonido ó video
     * @return Reproductor para el fichero pasado como parametro
     * @see File
     */
    public static VentanaInternaJMFPlayer getInstance(File f) {
        VentanaInternaJMFPlayer v = new VentanaInternaJMFPlayer(f);
        return (v.p != null ? v : null);
    }

    /**
     * Comienza la reproducción del fichero
     *
     */
    public void play() {
        try {
            p.start();
        } catch (Exception e) {
        }
    }

    /**
     * Cierra la instancia del reproductor
     */
    public void close() {
        try {
            p.close();
        } catch (Exception e) {
            e.getMessage();
        }
    }

    /**
     * El metodo regresa el Player de la {@link VentanaInternaJMFPlayer}
     *
     * @return El reproductor actual {@link Player}
     */
    public Player getPlayer() {
        return this.p;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMediaPlayerPanel = new javax.swing.JPanel();
        jPlayButtonPanel = new javax.swing.JPanel();
        jPlayButton = new javax.swing.JButton();
        jPauseButtonPanel = new javax.swing.JPanel();
        jPauseButton = new javax.swing.JButton();
        jStopButtonPanel = new javax.swing.JPanel();
        jStopButton = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setToolTipText("Esta ventana reproduce sonidos leidos de fichero\n");
        setPreferredSize(new java.awt.Dimension(130, 50));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosing(evt);
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });

        jMediaPlayerPanel.setPreferredSize(new java.awt.Dimension(160, 50));
        jMediaPlayerPanel.setLayout(new javax.swing.BoxLayout(jMediaPlayerPanel, javax.swing.BoxLayout.LINE_AXIS));

        jPlayButtonPanel.setPreferredSize(new java.awt.Dimension(100, 50));
        jPlayButtonPanel.setLayout(new java.awt.BorderLayout());

        jPlayButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/ugr/smm/icons/PlayPressed_48x48.png"))); // NOI18N
        jPlayButton.setText("\n");
        jPlayButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPlayButtonActionPerformed(evt);
            }
        });
        jPlayButtonPanel.add(jPlayButton, java.awt.BorderLayout.CENTER);

        jMediaPlayerPanel.add(jPlayButtonPanel);

        jPauseButtonPanel.setLayout(new java.awt.BorderLayout());

        jPauseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/ugr/smm/icons/pause_icon.jpg"))); // NOI18N
        jPauseButton.setPreferredSize(new java.awt.Dimension(100, 50));
        jPauseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPauseButtonActionPerformed(evt);
            }
        });
        jPauseButtonPanel.add(jPauseButton, java.awt.BorderLayout.CENTER);

        jMediaPlayerPanel.add(jPauseButtonPanel);

        jStopButtonPanel.setLayout(new java.awt.BorderLayout());

        jStopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/ugr/smm/icons/StopDisabled_48x48.png"))); // NOI18N
        jStopButton.setPreferredSize(new java.awt.Dimension(100, 50));
        jStopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jStopButtonActionPerformed(evt);
            }
        });
        jStopButtonPanel.add(jStopButton, java.awt.BorderLayout.CENTER);

        jMediaPlayerPanel.add(jStopButtonPanel);

        getContentPane().add(jMediaPlayerPanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formInternalFrameClosing(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosing
        p.close();
        // TODO add your handling code here:
    }//GEN-LAST:event_formInternalFrameClosing
    //Metodo para que cambiar los iconos en base a la interacción del usuario
    private void jPlayButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPlayButtonActionPerformed
        this.jPlayButton.setSelected(true);
        this.jPauseButton.setSelected(false);
        this.jStopButton.setSelected(false);
        jPlayButton.setIcon(new ImageIcon(getClass().getResource("/es/ugr/smm/icons/PlayDisabled_48x48.png")));
        jPauseButton.setIcon(new ImageIcon(getClass().getResource("/es/ugr/smm/icons/player_pause.jpg")));
        jStopButton.setIcon(new ImageIcon(getClass().getResource("/es/ugr/smm/icons/StopNormalRed_48x48.png")));
        p.start();
    }//GEN-LAST:event_jPlayButtonActionPerformed
    //Metodo para que cambiar los iconos en base a la interacción del usuario
    private void jPauseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPauseButtonActionPerformed
        this.jPlayButton.setSelected(false);
        this.jPauseButton.setSelected(true);
        this.jStopButton.setSelected(false);
        jPlayButton.setIcon(new ImageIcon(getClass().getResource("/es/ugr/smm/icons/PlayPressed_48x48.png")));
        jPauseButton.setIcon(new ImageIcon(getClass().getResource("/es/ugr/smm/icons/pause_icon.jpg")));
        jStopButton.setIcon(new ImageIcon(getClass().getResource("/es/ugr/smm/icons/StopNormalRed_48x48.png")));
        p.stop();
    }//GEN-LAST:event_jPauseButtonActionPerformed
    //Metodo para que cambiar los iconos en base a la interacción del usuario
    private void jStopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jStopButtonActionPerformed
        this.jPlayButton.setSelected(false);
        this.jPauseButton.setSelected(false);
        this.jStopButton.setSelected(true);
        jPlayButton.setIcon(new ImageIcon(getClass().getResource("/es/ugr/smm/icons/PlayPressed_48x48.png")));
        jPauseButton.setIcon(new ImageIcon(getClass().getResource("/es/ugr/smm/icons/player_pause.jpg")));
        jStopButton.setIcon(new ImageIcon(getClass().getResource("/es/ugr/smm/icons/StopDisabled_48x48.png")));
        p.stop();
        p.setMediaTime(new Time(0.0));
    }//GEN-LAST:event_jStopButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jMediaPlayerPanel;
    private javax.swing.JButton jPauseButton;
    private javax.swing.JPanel jPauseButtonPanel;
    private javax.swing.JButton jPlayButton;
    private javax.swing.JPanel jPlayButtonPanel;
    private javax.swing.JButton jStopButton;
    private javax.swing.JPanel jStopButtonPanel;
    // End of variables declaration//GEN-END:variables
}
