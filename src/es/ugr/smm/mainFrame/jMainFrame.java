/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package es.ugr.smm.mainFrame;

import es.ugr.smm.internalWindow.VentanaInternaCamara;
import es.ugr.smm.internalWindow.VentanaInternaGrabacion;
import es.ugr.smm.internalWindow.VentanaInternaJMFPlayer;
import es.ugr.smm.internalWindow.jImageInternalWindow;
import es.ugr.smm.optionPane.jMultipleInputOptionPane;
import es.ugr.smm.shapes.Shapes;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Point;
import java.awt.event.ItemEvent;
import java.awt.event.WindowEvent;
import java.awt.geom.AffineTransform;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.ConvolveOp;
import java.awt.image.LookupOp;
import java.awt.image.LookupTable;
import java.awt.image.RescaleOp;
import java.io.File;
import javax.imageio.ImageIO;
import javax.media.Buffer;
import javax.media.Player;
import javax.media.control.FrameGrabbingControl;
import javax.media.format.VideoFormat;
import javax.media.util.BufferToImage;
import javax.swing.ImageIcon;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author Jose
 * @version 1.0
 *
 */
public class jMainFrame extends javax.swing.JFrame {

    private BufferedImage imgSource;

    /**
     * Creates new form jMainFrame
     */
    public jMainFrame() {

        initComponents();
        this.setTitle("jMultiPlayer");
        //  ImageIcon icon = createImageIcon("")
        jShapeFormPanel.setSize(100, 50);
        jAttributesPanel.setSize(100, 50);
        ImageIcon shapeIcon = new ImageIcon(getClass().getResource("/es/ugr/smm/icons/Shape.GIF"));
        ImageIcon attributesIcon = new ImageIcon(getClass().getResource("/es/ugr/smm/icons/attributes.GIF"));
        //ImageIcon imageIcon = new ImageIcon(getClass().getResource("/es/ugr/smm/icons/Image_Manipulation.gif"));
        this.jTabbedPane.addTab("Formas de Dibujo", shapeIcon, jShapeFormPanel, "Formas de dibujo disponible");
        this.jTabbedPane.addTab("Atributos de Formas", attributesIcon, jAttributesPanel, "Atributos de manipuación de formas");
        //this.jTabbedPane.addTab("Operaciones sobre Imágenes", imageIcon, jImageManipulationPanel, "Operaciones para manipular imágenes");
        this.jContinuityButton.setSelected(true);
        this.jNoFillRadioButton.setSelected(true);



    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jConitnuityGroup = new javax.swing.ButtonGroup();
        jFillButtonGroup = new javax.swing.ButtonGroup();
        jShapePaintGroup = new javax.swing.ButtonGroup();
        jColorPaletteGroup = new javax.swing.ButtonGroup();
        jAttributesPanel = new javax.swing.JPanel();
        jColorPanel = new javax.swing.JPanel();
        jBlackColorButton = new javax.swing.JButton();
        jRedColorButton = new javax.swing.JButton();
        jBlueColorButton = new javax.swing.JButton();
        jGrayColorButton = new javax.swing.JButton();
        jYellowColorButton = new javax.swing.JButton();
        jGreenColorButton = new javax.swing.JButton();
        jStrokePanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jStrokeSpinner = new javax.swing.JSpinner();
        jPanel6 = new javax.swing.JPanel();
        jContinuityButton = new javax.swing.JRadioButton();
        jDiscontinuityButton = new javax.swing.JRadioButton();
        jPropertiesPanel = new javax.swing.JPanel();
        jFillPanel = new javax.swing.JPanel();
        jNoFillRadioButton = new javax.swing.JRadioButton();
        jSolidFillRadioButton = new javax.swing.JRadioButton();
        jGradientFillRadioButton = new javax.swing.JRadioButton();
        jPanel9 = new javax.swing.JPanel();
        jEditCheckBox = new javax.swing.JCheckBox();
        jShapeFormPanel = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jPointButton = new javax.swing.JButton();
        jLineButton = new javax.swing.JButton();
        jRectangleButton = new javax.swing.JButton();
        jEllipseButton = new javax.swing.JButton();
        jFreePathButton = new javax.swing.JButton();
        jCentralPanel = new javax.swing.JPanel();
        jDrawingToolBar = new javax.swing.JToolBar();
        jTabbedPane = new javax.swing.JTabbedPane();
        jLowerPanel = new javax.swing.JPanel();
        jLowestPanel = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jImageManipulationPanel = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jBrightnessSlider = new javax.swing.JSlider(-255,255,0);
        jComboBox1 = new javax.swing.JComboBox();
        jPanel3 = new javax.swing.JPanel();
        jNormalContrastButton = new javax.swing.JButton();
        jIlluminationButton = new javax.swing.JButton();
        jDarknessButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jRotationSlider = new javax.swing.JSlider();
        jNinetyDegRotationButton = new javax.swing.JButton();
        jOneEightyDegRotationButton = new javax.swing.JButton();
        jTwoSeventyDegRotationButton = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jZoomInButton = new javax.swing.JButton();
        jZoomOutButton = new javax.swing.JButton();
        jDesktopPane = new javax.swing.JDesktopPane();
        jMenuBar = new javax.swing.JMenuBar();
        jFileMenu = new javax.swing.JMenu();
        jNewMenuItem = new javax.swing.JMenuItem();
        jOpenMenuItem = new javax.swing.JMenuItem();
        jSaveMenuItem = new javax.swing.JMenuItem();
        jRecordMenuItem = new javax.swing.JMenuItem();
        jExitMenuItem = new javax.swing.JMenuItem();
        jViewMenu = new javax.swing.JMenu();
        jViewFormsMenuItem = new javax.swing.JCheckBoxMenuItem();
        jImageOpMenuItem = new javax.swing.JCheckBoxMenuItem();
        jCameraMenu = new javax.swing.JMenu();
        jCameraMenuItem = new javax.swing.JMenuItem();
        jCaptureMenuItem = new javax.swing.JMenuItem();
        jInfoMenu = new javax.swing.JMenu();
        jAboutMenuItem = new javax.swing.JMenuItem();

        jAttributesPanel.setPreferredSize(new java.awt.Dimension(600, 80));
        jAttributesPanel.setLayout(new java.awt.GridLayout(1, 0));

        jColorPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Color", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP));
        jColorPanel.setPreferredSize(new java.awt.Dimension(180, 55));
        jColorPanel.setLayout(new java.awt.GridLayout(2, 3));

        jBlackColorButton.setBackground(new java.awt.Color(1, 1, 1));
        jBlackColorButton.setToolTipText("Negro");
        jColorPaletteGroup.add(jBlackColorButton);
        jBlackColorButton.setFocusable(true);
        jBlackColorButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBlackColorButton.setMaximumSize(new java.awt.Dimension(6, 6));
        jBlackColorButton.setMinimumSize(new java.awt.Dimension(3, 3));
        jBlackColorButton.setPreferredSize(new java.awt.Dimension(33, 30));
        jBlackColorButton.setSelected(true);
        jBlackColorButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBlackColorButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBlackColorButtonMouseClicked(evt);
            }
        });
        jColorPanel.add(jBlackColorButton);

        jRedColorButton.setBackground(new java.awt.Color(255, 0, 0));
        jRedColorButton.setToolTipText("Rojo");
        jColorPaletteGroup.add(jRedColorButton);
        jRedColorButton.setFocusable(true);
        jRedColorButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jRedColorButton.setMaximumSize(new java.awt.Dimension(6, 6));
        jRedColorButton.setMinimumSize(new java.awt.Dimension(3, 3));
        jRedColorButton.setPreferredSize(new java.awt.Dimension(33, 30));
        jRedColorButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jRedColorButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jRedColorButtonMouseClicked(evt);
            }
        });
        jColorPanel.add(jRedColorButton);

        jBlueColorButton.setBackground(new java.awt.Color(0, 7, 255));
        jBlueColorButton.setToolTipText("Azul");
        jColorPaletteGroup.add(jBlueColorButton);
        jBlueColorButton.setFocusable(true
        );
        jBlueColorButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jBlueColorButton.setMaximumSize(new java.awt.Dimension(10, 10));
        jBlueColorButton.setMinimumSize(new java.awt.Dimension(6, 6));
        jBlueColorButton.setPreferredSize(new java.awt.Dimension(33, 30));
        jBlueColorButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jBlueColorButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBlueColorButtonMouseClicked(evt);
            }
        });
        jColorPanel.add(jBlueColorButton);

        jGrayColorButton.setBackground(new java.awt.Color(192, 192, 192));
        jGrayColorButton.setToolTipText("Gris");
        jColorPaletteGroup.add(jGrayColorButton);
        jGrayColorButton.setFocusable(true
        );
        jGrayColorButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jGrayColorButton.setMaximumSize(new java.awt.Dimension(6, 6));
        jGrayColorButton.setMinimumSize(new java.awt.Dimension(3, 3));
        jGrayColorButton.setPreferredSize(new java.awt.Dimension(33, 30));
        jGrayColorButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jGrayColorButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jGrayColorButtonMouseClicked(evt);
            }
        });
        jColorPanel.add(jGrayColorButton);

        jYellowColorButton.setBackground(new java.awt.Color(255, 234, 0));
        jYellowColorButton.setToolTipText("Amarillo");
        jColorPaletteGroup.add(jYellowColorButton);
        jYellowColorButton.setFocusable(true);
        jYellowColorButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jYellowColorButton.setMaximumSize(new java.awt.Dimension(6, 6));
        jYellowColorButton.setMinimumSize(new java.awt.Dimension(3, 3));
        jYellowColorButton.setPreferredSize(new java.awt.Dimension(33, 30));
        jYellowColorButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jYellowColorButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jYellowColorButtonMouseClicked(evt);
            }
        });
        jYellowColorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jYellowColorButtonActionPerformed(evt);
            }
        });
        jColorPanel.add(jYellowColorButton);

        jGreenColorButton.setBackground(new java.awt.Color(1, 168, 31));
        jGreenColorButton.setToolTipText("Verde");
        jColorPaletteGroup.add(jGreenColorButton);
        jGreenColorButton.setFocusable(true);
        jGreenColorButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jGreenColorButton.setMaximumSize(new java.awt.Dimension(6, 6));
        jGreenColorButton.setMinimumSize(new java.awt.Dimension(3, 3));
        jGreenColorButton.setPreferredSize(new java.awt.Dimension(33, 30));
        jGreenColorButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jGreenColorButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jGreenColorButtonMouseClicked(evt);
            }
        });
        jColorPanel.add(jGreenColorButton);

        jAttributesPanel.add(jColorPanel);

        jStrokePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Trazo", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP));
        jStrokePanel.setMinimumSize(new java.awt.Dimension(600, 80));
        jStrokePanel.setPreferredSize(new java.awt.Dimension(800, 125));
        jStrokePanel.setLayout(new javax.swing.BoxLayout(jStrokePanel, javax.swing.BoxLayout.LINE_AXIS));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Grosor", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP));

        jStrokeSpinner.setToolTipText("Grosor");
        jStrokeSpinner.setPreferredSize(new java.awt.Dimension(60, 45));
        jStrokeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jStrokeSpinnerStateChanged(evt);
            }
        });
        jPanel1.add(jStrokeSpinner);

        jStrokePanel.add(jPanel1);

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Continuidad del Trazo", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP));
        jPanel6.setToolTipText("");
        jPanel6.setLayout(new java.awt.GridLayout(1, 0));

        jConitnuityGroup.add(jContinuityButton);
        jContinuityButton.setText("Contínuo");
        jContinuityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jContinuityButtonActionPerformed(evt);
            }
        });
        jPanel6.add(jContinuityButton);

        jConitnuityGroup.add(jDiscontinuityButton);
        jDiscontinuityButton.setText("Discontinuidad");
        jDiscontinuityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDiscontinuityButtonActionPerformed(evt);
            }
        });
        jPanel6.add(jDiscontinuityButton);

        jStrokePanel.add(jPanel6);

        jAttributesPanel.add(jStrokePanel);

        jPropertiesPanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Atributos", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP));
        jPropertiesPanel.setPreferredSize(new java.awt.Dimension(80, 40));
        jPropertiesPanel.setLayout(new java.awt.GridLayout(1, 0));

        jFillPanel.setLayout(new java.awt.BorderLayout());

        jFillButtonGroup.add(jNoFillRadioButton);
        jNoFillRadioButton.setText("No relleno");
        jNoFillRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNoFillRadioButtonActionPerformed(evt);
            }
        });
        jFillPanel.add(jNoFillRadioButton, java.awt.BorderLayout.PAGE_START);

        jFillButtonGroup.add(jSolidFillRadioButton);
        jSolidFillRadioButton.setText("Relleno liso");
        jSolidFillRadioButton.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jSolidFillRadioButtonItemStateChanged(evt);
            }
        });
        jFillPanel.add(jSolidFillRadioButton, java.awt.BorderLayout.CENTER);

        jFillButtonGroup.add(jGradientFillRadioButton);
        jGradientFillRadioButton.setText("Relleno degradado");
        jFillPanel.add(jGradientFillRadioButton, java.awt.BorderLayout.PAGE_END);

        jPropertiesPanel.add(jFillPanel);

        jPanel9.setLayout(new java.awt.GridBagLayout());

        jEditCheckBox.setText("Editar");
        jEditCheckBox.setToolTipText("Para mover las figuras");
        jEditCheckBox.setBorder(null);
        jEditCheckBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                jEditCheckBoxItemStateChanged(evt);
            }
        });
        jPanel9.add(jEditCheckBox, new java.awt.GridBagConstraints());

        jPropertiesPanel.add(jPanel9);

        jAttributesPanel.add(jPropertiesPanel);

        jShapeFormPanel.setMinimumSize(new java.awt.Dimension(100, 25));
        jShapeFormPanel.setPreferredSize(new java.awt.Dimension(100, 50));
        jShapeFormPanel.setLayout(new java.awt.BorderLayout());

        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Formas de Dibujo", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP));

        jPointButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/ugr/smm/icons/Lapiz.gif"))); // NOI18N
        jPointButton.setToolTipText("Punto");
        jShapePaintGroup.add(jPointButton);
        jPointButton.setSelected(true);
        jPointButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPointButtonActionPerformed(evt);
            }
        });
        jPanel7.add(jPointButton);

        jLineButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/ugr/smm/icons/Linea.gif"))); // NOI18N
        jLineButton.setToolTipText("Linea");
        jShapePaintGroup.add(jLineButton);
        jLineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jLineButtonActionPerformed(evt);
            }
        });
        jPanel7.add(jLineButton);

        jRectangleButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/ugr/smm/icons/Rectangulo.gif"))); // NOI18N
        jRectangleButton.setToolTipText("Rectangulo");
        jShapePaintGroup.add(jRectangleButton);
        jRectangleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRectangleButtonActionPerformed(evt);
            }
        });
        jPanel7.add(jRectangleButton);

        jEllipseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/ugr/smm/icons/Ovalo.gif"))); // NOI18N
        jEllipseButton.setToolTipText("Elipse");
        jShapePaintGroup.add(jEllipseButton);
        jEllipseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jEllipseButtonActionPerformed(evt);
            }
        });
        jPanel7.add(jEllipseButton);

        jFreePathButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/ugr/smm/icons/Trazo_Libre.GIF"))); // NOI18N
        jFreePathButton.setToolTipText("Trazo Libre");
        jShapePaintGroup.add(jFreePathButton);
        jFreePathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFreePathButtonActionPerformed(evt);
            }
        });
        jPanel7.add(jFreePathButton);

        jShapeFormPanel.add(jPanel7, java.awt.BorderLayout.LINE_START);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1050, 780));

        jCentralPanel.setLayout(new java.awt.BorderLayout());

        jDrawingToolBar.setRollover(true);
        jDrawingToolBar.setMinimumSize(new java.awt.Dimension(38, 35));
        jDrawingToolBar.setPreferredSize(new java.awt.Dimension(1200, 190));

        jTabbedPane.setMinimumSize(new java.awt.Dimension(1000, 160));
        jTabbedPane.setPreferredSize(new java.awt.Dimension(1125, 190));
        jDrawingToolBar.add(jTabbedPane);

        jCentralPanel.add(jDrawingToolBar, java.awt.BorderLayout.PAGE_START);

        jLowerPanel.setLayout(new java.awt.BorderLayout());

        jLowestPanel.setLayout(new java.awt.BorderLayout());

        jToolBar1.setRollover(true);

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));

        jBrightnessSlider.setPaintTicks(true);
        jBrightnessSlider.setToolTipText("Modifica el brillo mediante un deslizador");
        jBrightnessSlider.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Brillo", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP, null, new java.awt.Color(0, 0, 0)));
        jBrightnessSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jBrightnessSliderStateChanged(evt);
            }
        });
        jBrightnessSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jBrightnessSliderFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jBrightnessSliderFocusLost(evt);
            }
        });
        jPanel2.add(jBrightnessSlider);

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Media", "Binomial", "Enfoque", "Relieve", "Laplaciano" }));
        jComboBox1.setToolTipText("Filtros de emborronamiento, enfoque, relieve, y fronteras");
        jComboBox1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Filtro\n", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, null, new java.awt.Color(0, 0, 0)));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        jPanel2.add(jComboBox1);

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Contraste", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));
        jPanel3.setToolTipText("Contraste normal, iluminado y oscurecido");

        jNormalContrastButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/ugr/smm/icons/contraste.png"))); // NOI18N
        jNormalContrastButton.setBorder(null);
        jNormalContrastButton.setPreferredSize(new java.awt.Dimension(30, 30));
        jNormalContrastButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNormalContrastButtonActionPerformed(evt);
            }
        });
        jPanel3.add(jNormalContrastButton);

        jIlluminationButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/ugr/smm/icons/iluminar.png"))); // NOI18N
        jIlluminationButton.setBorder(null);
        jIlluminationButton.setPreferredSize(new java.awt.Dimension(30, 30));
        jIlluminationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jIlluminationButtonActionPerformed(evt);
            }
        });
        jPanel3.add(jIlluminationButton);

        jDarknessButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/ugr/smm/icons/oscurecer.png"))); // NOI18N
        jDarknessButton.setBorder(null);
        jDarknessButton.setPreferredSize(new java.awt.Dimension(30, 30));
        jDarknessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDarknessButtonActionPerformed(evt);
            }
        });
        jPanel3.add(jDarknessButton);

        jPanel2.add(jPanel3);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Rotación", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));
        jPanel4.setToolTipText("Rotación de Imágenes mediante deslizador y botones");

        jRotationSlider.setMajorTickSpacing(90);
        jRotationSlider.setMaximum(360);
        jRotationSlider.setPaintTicks(true);
        jRotationSlider.setToolTipText("Rotación mediante deslizador");
        jRotationSlider.setValue(0);
        jRotationSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jRotationSliderStateChanged(evt);
            }
        });
        jRotationSlider.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jRotationSliderFocusLost(evt);
            }
            public void focusGained(java.awt.event.FocusEvent evt) {
                jRotationSliderFocusGained(evt);
            }
        });
        jPanel4.add(jRotationSlider);

        jNinetyDegRotationButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/ugr/smm/icons/rotacion90.png"))); // NOI18N
        jNinetyDegRotationButton.setToolTipText("Rotación 90º");
        jNinetyDegRotationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNinetyDegRotationButtonActionPerformed(evt);
            }
        });
        jPanel4.add(jNinetyDegRotationButton);

        jOneEightyDegRotationButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/ugr/smm/icons/rotacion180.png"))); // NOI18N
        jOneEightyDegRotationButton.setToolTipText("Rotación 180º");
        jOneEightyDegRotationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOneEightyDegRotationButtonActionPerformed(evt);
            }
        });
        jPanel4.add(jOneEightyDegRotationButton);

        jTwoSeventyDegRotationButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/ugr/smm/icons/rotacion270.png"))); // NOI18N
        jTwoSeventyDegRotationButton.setToolTipText("Rotación 270º");
        jTwoSeventyDegRotationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTwoSeventyDegRotationButtonActionPerformed(evt);
            }
        });
        jPanel4.add(jTwoSeventyDegRotationButton);

        jPanel2.add(jPanel4);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Escala", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.ABOVE_TOP));
        jPanel5.setToolTipText("Escalado (aumentar y disminuir)");

        jZoomInButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/ugr/smm/icons/aumentar.png"))); // NOI18N
        jZoomInButton.setToolTipText("Aumentar");
        jZoomInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jZoomInButtonActionPerformed(evt);
            }
        });
        jPanel5.add(jZoomInButton);

        jZoomOutButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/ugr/smm/icons/disminuir.png"))); // NOI18N
        jZoomOutButton.setToolTipText("Disminuir");
        jZoomOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jZoomOutButtonActionPerformed(evt);
            }
        });
        jPanel5.add(jZoomOutButton);

        jPanel2.add(jPanel5);

        jImageManipulationPanel.add(jPanel2);

        jToolBar1.add(jImageManipulationPanel);

        jLowestPanel.add(jToolBar1, java.awt.BorderLayout.CENTER);

        jLowerPanel.add(jLowestPanel, java.awt.BorderLayout.PAGE_END);
        jLowerPanel.add(jDesktopPane, java.awt.BorderLayout.CENTER);

        jCentralPanel.add(jLowerPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(jCentralPanel, java.awt.BorderLayout.CENTER);

        jFileMenu.setText("Archivo");

        jNewMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/ugr/smm/icons/NuevoBoceto.GIF"))); // NOI18N
        jNewMenuItem.setText("Nuevo");
        jNewMenuItem.setToolTipText("Crear una nueva imagen");
        jNewMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNewMenuItemActionPerformed(evt);
            }
        });
        jFileMenu.add(jNewMenuItem);

        jOpenMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/ugr/smm/icons/AbrirMedio.png"))); // NOI18N
        jOpenMenuItem.setText("Abrir");
        jOpenMenuItem.setToolTipText("Abrir un fichero de imagen, sonido o video");
        jOpenMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOpenMenuItemActionPerformed(evt);
            }
        });
        jFileMenu.add(jOpenMenuItem);

        jSaveMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/ugr/smm/icons/Guardar.gif"))); // NOI18N
        jSaveMenuItem.setText("Guardar");
        jSaveMenuItem.setToolTipText("Guarda la imagen de la ventana seleccionada");
        jSaveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaveMenuItemActionPerformed(evt);
            }
        });
        jFileMenu.add(jSaveMenuItem);

        jRecordMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/ugr/smm/icons/mic30_1.png"))); // NOI18N
        jRecordMenuItem.setText("Grabar");
        jRecordMenuItem.setToolTipText("Grabar sonidos captados del micrófono");
        jRecordMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRecordMenuItemActionPerformed(evt);
            }
        });
        jFileMenu.add(jRecordMenuItem);

        jExitMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/ugr/smm/icons/icon_power_off_1.jpg"))); // NOI18N
        jExitMenuItem.setText("Salir");
        jExitMenuItem.setToolTipText("Para salir del programa");
        jExitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jExitMenuItemActionPerformed(evt);
            }
        });
        jFileMenu.add(jExitMenuItem);

        jMenuBar.add(jFileMenu);

        jViewMenu.setText("Ver");

        jViewFormsMenuItem.setSelected(true);
        jViewFormsMenuItem.setText("Visualizar/Ocultar Barra de Dibujo");
        jViewFormsMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jViewFormsMenuItemActionPerformed(evt);
            }
        });
        jViewMenu.add(jViewFormsMenuItem);

        jImageOpMenuItem.setSelected(true);
        jImageOpMenuItem.setText("Visualizar/Ocultar Barra de Operaciones sobre Imágenes");
        jImageOpMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jImageOpMenuItemActionPerformed(evt);
            }
        });
        jViewMenu.add(jImageOpMenuItem);

        jMenuBar.add(jViewMenu);

        jCameraMenu.setText("Cámara");

        jCameraMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/ugr/smm/icons/Camara.png"))); // NOI18N
        jCameraMenuItem.setText("Webcam");
        jCameraMenuItem.setToolTipText("Lanza la ventana tipo webcam");
        jCameraMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCameraMenuItemActionPerformed(evt);
            }
        });
        jCameraMenu.add(jCameraMenuItem);

        jCaptureMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/ugr/smm/icons/Capturar.png"))); // NOI18N
        jCaptureMenuItem.setText("Capturar");
        jCaptureMenuItem.setToolTipText("Captura imágenes de la cámera o del vídeo");
        jCaptureMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCaptureMenuItemActionPerformed(evt);
            }
        });
        jCameraMenu.add(jCaptureMenuItem);

        jMenuBar.add(jCameraMenu);

        jInfoMenu.setText("Ayuda");

        jAboutMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/es/ugr/smm/icons/about.jpg"))); // NOI18N
        jAboutMenuItem.setText("Acerca de...");
        jAboutMenuItem.setToolTipText("Información sobre el proyecto");
        jAboutMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAboutMenuItemActionPerformed(evt);
            }
        });
        jInfoMenu.add(jAboutMenuItem);

        jMenuBar.add(jInfoMenu);

        setJMenuBar(jMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public BufferedImage getFrame(Player player) {
        FrameGrabbingControl fgc;
        fgc = (FrameGrabbingControl) player.getControl("javax.media.control.FrameGrabbingControl");
        Buffer bufferFrame = fgc.grabFrame();
        BufferToImage bti;
        bti = new BufferToImage((VideoFormat) bufferFrame.getFormat());
        Image img = bti.createImage(bufferFrame);
        return (BufferedImage) img;
    }

    BufferedImage convertImageType(BufferedImage img, int type) {
        if (img == null) {
            return null;
        }
        BufferedImage imgOut = new BufferedImage(img.getWidth(),
                img.getHeight(), type);
        Graphics2D g2d = imgOut.createGraphics();
        g2d.drawImage(img, 0, 0, null);
        return imgOut;
    }

    private void jNewMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNewMenuItemActionPerformed
        jMultipleInputOptionPane sizePanel = new jMultipleInputOptionPane();
        jImageInternalWindow vi;
        if (!sizePanel.isCancelled()) {
            vi = new jImageInternalWindow(sizePanel.getHeight(), sizePanel.getWidth());
        } else {
            vi = new jImageInternalWindow();
        }
        vi.setTitle("Nueva");
        jDesktopPane.add(vi);
        vi.getImagePanel().repaint();
        vi.setVisible(true);
    }//GEN-LAST:event_jNewMenuItemActionPerformed

    private boolean isImageExtension(String extension) {
        if (extension.equals("jpeg") || extension.equals("jpg") || extension.equals("gif") || extension.equals("png")) {
            return true;
        }
        return false;
    }

    private boolean isSoundExtension(String extension) {
        if (extension.equals(Utils.mp3) || extension.equals(Utils.wav)) {
            return true;
        }
        return false;

    }

    private boolean isVideoExtension(String extension) {
        if (extension.equals(Utils.avi)) {
            return true;
        }
        return false;
    }

    private void jOpenMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOpenMenuItemActionPerformed
        JFileChooser dlg = new JFileChooser();
        dlg.addChoosableFileFilter(new GIFImageFilter());
        dlg.addChoosableFileFilter(new JPEGImageFilter());
        dlg.addChoosableFileFilter(new PNGImageFilter());
        dlg.addChoosableFileFilter(new WAVSoundFilter());
        dlg.addChoosableFileFilter(new MP3SoundFilter());
        dlg.addChoosableFileFilter(new AVIVideoFilter());
        int resp = dlg.showOpenDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                if (isImageExtension(Utils.getExtension(f))) {
                    BufferedImage img = ImageIO.read(f);
                    jImageInternalWindow vi = new jImageInternalWindow();
                    vi.getImagePanel().setImage(img);

                    this.jDesktopPane.add(vi);
                    vi.setPreferredSize(new Dimension(img.getWidth(), img.getHeight()));
                    vi.setTitle(f.getName());
                    vi.setVisible(true);
                } else if (isVideoExtension(Utils.getExtension(f)) || isSoundExtension(Utils.getExtension(f))) {
                    VentanaInternaJMFPlayer v = VentanaInternaJMFPlayer.getInstance(f);
                    this.jDesktopPane.add(v);
                    v.setVisible(true);
                }
            } catch (Exception ex) {
                System.err.println("No se ha podido abrir el fichero");
            }
        }
    }//GEN-LAST:event_jOpenMenuItemActionPerformed

    private void jSaveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveMenuItemActionPerformed

        JFileChooser dlg = new JFileChooser();
        dlg.addChoosableFileFilter(new GIFImageFilter());
        dlg.addChoosableFileFilter(new JPEGImageFilter());
        dlg.addChoosableFileFilter(new PNGImageFilter());
        int resp = dlg.showSaveDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            String ext = "";
            String extension = dlg.getFileFilter().getDescription();

            if (extension.equals("*.jpeg,*.jpg")) {
                ext = ".jpg";
            }
            if (extension.equals("*.png,*.PNG")) {
                ext = ".png";
            }
            if (extension.equals("*.gif,*.GIF")) {
                ext = ".gif";
            }



            try {
                File f = dlg.getSelectedFile();
                //El siguiente codigo permite conocer  la
                jImageInternalWindow vi = (jImageInternalWindow) jDesktopPane.getSelectedFrame();
                BufferedImage img = vi.getImagePanel().getImage();
                ImageIO.write(img, "jpg", f);

            } catch (Exception ex) {
                ex.getMessage();
            }
        }
    }//GEN-LAST:event_jSaveMenuItemActionPerformed

    private void jBrightnessSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jBrightnessSliderStateChanged
        if ((jImageInternalWindow) (jDesktopPane.getSelectedFrame()) instanceof jImageInternalWindow) {
            jImageInternalWindow vi = (jImageInternalWindow) (jDesktopPane.getSelectedFrame());
            if (vi != null && imgSource != null) {
                BufferedImage imgdest;
                try {
                    RescaleOp rop = new RescaleOp(1.0F, this.jBrightnessSlider.getValue(), null);
                    try {
                        imgdest = rop.filter(imgSource, null);
                    } catch (Exception e) {
                        imgSource = convertImageType(imgSource, BufferedImage.TYPE_INT_RGB);
                        imgdest = rop.filter(imgSource, null);
                    }
                    vi.getImagePanel().setImage(imgdest);
                    vi.getImagePanel().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        } else {
            jBrightnessSlider.setEnabled(false);
        }
    }//GEN-LAST:event_jBrightnessSliderStateChanged

    private void jBrightnessSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jBrightnessSliderFocusGained
        if ((jImageInternalWindow) (jDesktopPane.getSelectedFrame()) instanceof jImageInternalWindow) {
            jImageInternalWindow vi = (jImageInternalWindow) (jDesktopPane.getSelectedFrame());
            //Comprobar el tipo de la imagen
            imgSource = (vi != null) ? vi.getImagePanel().getImage() : null;
            if (imgSource != null) {
                imgSource = convertImageType(imgSource, BufferedImage.TYPE_INT_RGB);
            }
        } else {
            jBrightnessSlider.setEnabled(false);
        }
    }//GEN-LAST:event_jBrightnessSliderFocusGained

    private void jBrightnessSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jBrightnessSliderFocusLost
        imgSource = null;
        jBrightnessSlider.setValue(0);
    }//GEN-LAST:event_jBrightnessSliderFocusLost

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        if ((jImageInternalWindow) (jDesktopPane.getSelectedFrame()) instanceof jImageInternalWindow) {
            jImageInternalWindow vi = (jImageInternalWindow) (jDesktopPane.getSelectedFrame());
            if (vi != null) {
                imgSource = vi.getImagePanel().getImage();
                if (imgSource != null) {
                    try {
                        JComboBox cb = (JComboBox) evt.getSource();
                        ConvolveOp cop = new ConvolveOp(KernelProducer.createKernel(cb.getSelectedIndex()));
                        BufferedImage imgdest = cop.filter(imgSource, null);
                        vi.getImagePanel().setImage(imgdest);
                        vi.getImagePanel().repaint();
                    } catch (IllegalArgumentException e) {
                        System.err.println(e.getLocalizedMessage());
                    }
                }
            }
        } else {
            jComboBox1.setEnabled(false);
        }
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jNormalContrastButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNormalContrastButtonActionPerformed
        if ((jImageInternalWindow) (jDesktopPane.getSelectedFrame()) instanceof jImageInternalWindow) {
            jImageInternalWindow vi = (jImageInternalWindow) (jDesktopPane.getSelectedFrame());
            if (vi != null) {
                imgSource = vi.getImagePanel().getImage();
                BufferedImage imgdest;
                if (imgSource != null) {
                    try {
                        LookupTable lt;
                        lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_SFUNCION);
                        LookupOp lop = new LookupOp(lt, null);
                        try {
                            imgdest = lop.filter(imgSource, null);
                        } catch (Exception e) {
                            imgSource = convertImageType(imgSource, BufferedImage.TYPE_INT_RGB);
                            imgdest = lop.filter(imgSource, null);
                        }

                        vi.getImagePanel().setImage(imgdest);
                        vi.getImagePanel().repaint();
                    } catch (IllegalArgumentException e) {
                        System.err.println(e.getLocalizedMessage());
                    }
                }
            }
        }

    }//GEN-LAST:event_jNormalContrastButtonActionPerformed

    private void jIlluminationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jIlluminationButtonActionPerformed
        if ((jImageInternalWindow) (jDesktopPane.getSelectedFrame()) instanceof jImageInternalWindow) {
            jImageInternalWindow vi = (jImageInternalWindow) (jDesktopPane.getSelectedFrame());
            if (vi != null) {
                imgSource = vi.getImagePanel().getImage();
                BufferedImage imgdest;
                if (imgSource != null) {

                    try {
                        LookupTable lt;
                        lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_GAMMA_CORRECTION);
                        LookupOp lop = new LookupOp(lt, null);
                        try {
                            imgdest = lop.filter(imgSource, null);
                        } catch (Exception e) {
                            imgSource = convertImageType(imgSource, BufferedImage.TYPE_INT_RGB);
                            imgdest = lop.filter(imgSource, null);
                        }
                        vi.getImagePanel().setImage(imgdest);
                        vi.getImagePanel().repaint();
                    } catch (IllegalArgumentException e) {
                        System.err.println(e.getLocalizedMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jIlluminationButtonActionPerformed

    private void jDarknessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDarknessButtonActionPerformed
        if ((jImageInternalWindow) (jDesktopPane.getSelectedFrame()) instanceof jImageInternalWindow) {
            jImageInternalWindow vi = (jImageInternalWindow) (jDesktopPane.getSelectedFrame());
            if (vi != null) {
                imgSource = vi.getImagePanel().getImage();
                BufferedImage imgdest;
                if (imgSource != null) {
                    try {
                        LookupTable lt;
                        lt = LookupTableProducer.createLookupTable(LookupTableProducer.TYPE_POWER);
                        LookupOp lop = new LookupOp(lt, null);
                        try {
                            imgdest = lop.filter(imgSource, null);
                        } catch (Exception e) {
                            imgSource = convertImageType(imgSource, BufferedImage.TYPE_INT_RGB);
                            imgdest = lop.filter(imgSource, null);
                        }
                        vi.getImagePanel().setImage(imgdest);
                        vi.getImagePanel().repaint();
                    } catch (IllegalArgumentException e) {
                        System.err.println(e.getLocalizedMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jDarknessButtonActionPerformed

    private void jRotationSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jRotationSliderStateChanged
        if ((jImageInternalWindow) (jDesktopPane.getSelectedFrame()) instanceof jImageInternalWindow) {
            jImageInternalWindow vi = (jImageInternalWindow) (jDesktopPane.getSelectedFrame());
            if (vi != null && imgSource != null) {

                try {
                    double r = Math.toRadians(this.jRotationSlider.getValue());
                    Point p = new Point(imgSource.getWidth() / 2, imgSource.getHeight() / 2);
                    AffineTransform at = AffineTransform.getRotateInstance(r, p.x, p.y);
                    AffineTransformOp atop;
                    atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                    BufferedImage imgdest = atop.filter(imgSource, null);
                    vi.getImagePanel().setImage(imgdest);
                    vi.getImagePanel().repaint();
                } catch (IllegalArgumentException e) {
                    System.err.println(e.getLocalizedMessage());
                }
            }
        }
    }//GEN-LAST:event_jRotationSliderStateChanged

    private void jRotationSliderFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jRotationSliderFocusLost
        if ((jImageInternalWindow) (jDesktopPane.getSelectedFrame()) instanceof jImageInternalWindow) {
            imgSource = null;
            jRotationSlider.setValue(0);
        }
    }//GEN-LAST:event_jRotationSliderFocusLost

    private void jRotationSliderFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jRotationSliderFocusGained
        if ((jImageInternalWindow) (jDesktopPane.getSelectedFrame()) instanceof jImageInternalWindow) {
            jImageInternalWindow vi = (jImageInternalWindow) (jDesktopPane.getSelectedFrame());
            imgSource = (vi != null) ? vi.getImagePanel().getImage() : null;
        }
    }//GEN-LAST:event_jRotationSliderFocusGained

    private void jNinetyDegRotationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNinetyDegRotationButtonActionPerformed
        if ((jImageInternalWindow) (jDesktopPane.getSelectedFrame()) instanceof jImageInternalWindow) {
            jImageInternalWindow vi = (jImageInternalWindow) (jDesktopPane.getSelectedFrame());
            if (vi != null) {
                imgSource = vi.getImagePanel().getImage();
                if (imgSource != null) {
                    try {
                        double r = Math.toRadians(90);
                        Point p = new Point(imgSource.getWidth() / 2, imgSource.getHeight() / 2);
                        AffineTransform at = AffineTransform.getRotateInstance(r, p.x, p.y);
                        AffineTransformOp atop;
                        atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                        BufferedImage imgdest = atop.filter(imgSource, null);
                        vi.getImagePanel().setImage(imgdest);
                        vi.getImagePanel().repaint();
                    } catch (IllegalArgumentException e) {
                        System.err.println(e.getLocalizedMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jNinetyDegRotationButtonActionPerformed

    private void jOneEightyDegRotationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOneEightyDegRotationButtonActionPerformed
        if ((jImageInternalWindow) (jDesktopPane.getSelectedFrame()) instanceof jImageInternalWindow) {
            jImageInternalWindow vi = (jImageInternalWindow) (jDesktopPane.getSelectedFrame());
            if (vi != null) {
                imgSource = vi.getImagePanel().getImage();
                if (imgSource != null) {
                    try {
                        double r = Math.toRadians(180);
                        Point p = new Point(imgSource.getWidth() / 2, imgSource.getHeight() / 2);
                        AffineTransform at = AffineTransform.getRotateInstance(r, p.x, p.y);
                        AffineTransformOp atop;
                        atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                        BufferedImage imgdest = atop.filter(imgSource, null);
                        vi.getImagePanel().setImage(imgdest);
                        vi.getImagePanel().repaint();
                    } catch (IllegalArgumentException e) {
                        System.err.println(e.getLocalizedMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jOneEightyDegRotationButtonActionPerformed

    private void jTwoSeventyDegRotationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTwoSeventyDegRotationButtonActionPerformed
        if ((jImageInternalWindow) (jDesktopPane.getSelectedFrame()) instanceof jImageInternalWindow) {
            jImageInternalWindow vi = (jImageInternalWindow) (jDesktopPane.getSelectedFrame());
            if (vi != null) {
                imgSource = vi.getImagePanel().getImage();
                if (imgSource != null) {
                    try {
                        double r = Math.toRadians(270);
                        Point p = new Point(imgSource.getWidth() / 2, imgSource.getHeight() / 2);
                        AffineTransform at = AffineTransform.getRotateInstance(r, p.x, p.y);
                        AffineTransformOp atop;
                        atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                        BufferedImage imgdest = atop.filter(imgSource, null);
                        vi.getImagePanel().setImage(imgdest);
                        vi.getImagePanel().repaint();
                    } catch (IllegalArgumentException e) {
                        System.err.println(e.getLocalizedMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jTwoSeventyDegRotationButtonActionPerformed

    private void jZoomInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jZoomInButtonActionPerformed
        if ((jImageInternalWindow) (jDesktopPane.getSelectedFrame()) instanceof jImageInternalWindow) {
            jImageInternalWindow vi = (jImageInternalWindow) (jDesktopPane.getSelectedFrame());
            if (vi != null) {
                imgSource = vi.getImagePanel().getImage();
                if (imgSource != null) {
                    try {
                        AffineTransform at = AffineTransform.getScaleInstance(1.25, 1.25);
                        AffineTransformOp atop;
                        atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                        BufferedImage imgdest = atop.filter(imgSource, null);
                        vi.getImagePanel().setImage(imgdest);
                        vi.getImagePanel().repaint();
                    } catch (IllegalArgumentException e) {
                        System.err.println(e.getLocalizedMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jZoomInButtonActionPerformed

    private void jZoomOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jZoomOutButtonActionPerformed
        if ((jImageInternalWindow) (jDesktopPane.getSelectedFrame()) instanceof jImageInternalWindow) {
            jImageInternalWindow vi = (jImageInternalWindow) (jDesktopPane.getSelectedFrame());
            if (vi != null) {
                imgSource = vi.getImagePanel().getImage();
                if (imgSource != null) {
                    try {
                        AffineTransform at = AffineTransform.getScaleInstance(0.75, 0.75);
                        AffineTransformOp atop;
                        atop = new AffineTransformOp(at, AffineTransformOp.TYPE_BILINEAR);
                        BufferedImage imgdest = atop.filter(imgSource, null);
                        vi.getImagePanel().setImage(imgdest);
                        vi.getImagePanel().repaint();
                    } catch (IllegalArgumentException e) {
                        System.err.println(e.getLocalizedMessage());
                    }
                }
            }
        }
    }//GEN-LAST:event_jZoomOutButtonActionPerformed

    private void jEditCheckBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jEditCheckBoxItemStateChanged
        jImageInternalWindow vi = (jImageInternalWindow) this.jDesktopPane.getSelectedFrame();
        if (vi != null) {
            if (evt.getStateChange() == ItemEvent.SELECTED) {
                vi.getImagePanel().setIsEdit(true);
            } else if (evt.getStateChange() == ItemEvent.DESELECTED) {
                vi.getImagePanel().setIsEdit(false);
            }
        }
    }//GEN-LAST:event_jEditCheckBoxItemStateChanged

    private void jStrokeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jStrokeSpinnerStateChanged
        jImageInternalWindow vi;
        if (jDesktopPane.getSelectedFrame() instanceof jImageInternalWindow) {
            vi = (jImageInternalWindow) (jDesktopPane.getSelectedFrame());
            vi.getImagePanel().setStrokeWidth((Integer) jStrokeSpinner.getValue());
            vi.repaint();
        } else {
            //jStrokeSpinner.setValue(0);
            JOptionPane.showMessageDialog(null, "Solo podemos cambiar el grosor cuando tenemos presente una ventana interna de Imágenes", "Error",
                    JOptionPane.ERROR_MESSAGE);

        }
    }//GEN-LAST:event_jStrokeSpinnerStateChanged

    private void jGreenColorButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jGreenColorButtonMouseClicked
        jImageInternalWindow vi = (jImageInternalWindow) (jDesktopPane.getSelectedFrame());
        vi.getImagePanel().setCurrentShapeColor(Color.GREEN);

    }//GEN-LAST:event_jGreenColorButtonMouseClicked

    private void jYellowColorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jYellowColorButtonActionPerformed
    }//GEN-LAST:event_jYellowColorButtonActionPerformed

    private void jYellowColorButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jYellowColorButtonMouseClicked
        jImageInternalWindow vi = (jImageInternalWindow) (jDesktopPane.getSelectedFrame());
        vi.getImagePanel().setCurrentShapeColor(Color.YELLOW);

    }//GEN-LAST:event_jYellowColorButtonMouseClicked

    private void jGrayColorButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jGrayColorButtonMouseClicked
        jImageInternalWindow vi = (jImageInternalWindow) (jDesktopPane.getSelectedFrame());
        vi.getImagePanel().setCurrentShapeColor(Color.GRAY);

    }//GEN-LAST:event_jGrayColorButtonMouseClicked

    private void jBlueColorButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBlueColorButtonMouseClicked
        jImageInternalWindow vi = (jImageInternalWindow) (jDesktopPane.getSelectedFrame());
        vi.getImagePanel().setCurrentShapeColor(Color.BLUE);

    }//GEN-LAST:event_jBlueColorButtonMouseClicked

    private void jRedColorButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jRedColorButtonMouseClicked
        jImageInternalWindow vi = (jImageInternalWindow) (jDesktopPane.getSelectedFrame());
        vi.getImagePanel().setCurrentShapeColor(Color.RED);

    }//GEN-LAST:event_jRedColorButtonMouseClicked

    private void jBlackColorButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBlackColorButtonMouseClicked

        jImageInternalWindow vi = (jImageInternalWindow) (jDesktopPane.getSelectedFrame());
        vi.getImagePanel().setCurrentShapeColor(Color.BLACK);

    }//GEN-LAST:event_jBlackColorButtonMouseClicked

    private void jCameraMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCameraMenuItemActionPerformed
        try {
            VentanaInternaCamara c = VentanaInternaCamara.getInstance();
            this.jDesktopPane.add(c);
            c.setVisible(true);
        } catch (Exception ex) {
            System.err.println("Error al leer la imagen");
        }// TODO add your handling code here:
    }//GEN-LAST:event_jCameraMenuItemActionPerformed

    private void jCaptureMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCaptureMenuItemActionPerformed
        try {
            VentanaInternaCamara vic = null;
            VentanaInternaJMFPlayer vjmf = null;
            BufferedImage img = null;
            jImageInternalWindow vi;
            if (this.jDesktopPane.getSelectedFrame() instanceof VentanaInternaCamara) {
                vic = (VentanaInternaCamara) jDesktopPane.getSelectedFrame();
            } else if (this.jDesktopPane.getSelectedFrame() instanceof VentanaInternaJMFPlayer) {
                vjmf = (VentanaInternaJMFPlayer) this.jDesktopPane.getSelectedFrame();
            }
            if (vic != null) {
                img = getFrame(vic.getPlayer());

            } else if (vjmf != null) {
                img = getFrame(vjmf.getPlayer());

            }
            vi = new jImageInternalWindow();
            vi.setTitle("Captura");
            vi.getImagePanel().setImage(img);
            vi.setSize(img.getWidth(), img.getHeight());

            this.jDesktopPane.add(vi);
            vi.setVisible(true);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Solo se puede capturar imágenes de la cámara o del video!", "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jCaptureMenuItemActionPerformed

    private void jRecordMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRecordMenuItemActionPerformed
        JFileChooser dlg = new JFileChooser();
        int resp = dlg.showSaveDialog(this);
        if (resp == JFileChooser.APPROVE_OPTION) {
            try {
                File f = dlg.getSelectedFile();
                VentanaInternaGrabacion vg = new VentanaInternaGrabacion(f);
                jDesktopPane.add(vg);
                vg.setVisible(true);
            } catch (Exception ex) {
                System.err.println("Error al leer la imagen");
            }
        }
    }//GEN-LAST:event_jRecordMenuItemActionPerformed

    private void jExitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jExitMenuItemActionPerformed
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_jExitMenuItemActionPerformed

    private void jAboutMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAboutMenuItemActionPerformed
        JOptionPane.showMessageDialog(null, "jMultiPlayer\n" + "Versión: 1.0\n" + "Autor: José Miguel Colella", "Acerca de...", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_jAboutMenuItemActionPerformed

    private void jImageOpMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jImageOpMenuItemActionPerformed
        if (this.jImageOpMenuItem.isSelected()) {
            this.jImageManipulationPanel.setVisible(true);
        } else {
            this.jImageManipulationPanel.setVisible(false);
        }
    }//GEN-LAST:event_jImageOpMenuItemActionPerformed

    private void jViewFormsMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jViewFormsMenuItemActionPerformed
        if (this.jViewFormsMenuItem.isSelected()) {
            this.jDrawingToolBar.setVisible(true);
        } else {
            this.jDrawingToolBar.setVisible(false);
        }
    }//GEN-LAST:event_jViewFormsMenuItemActionPerformed

    private void jPointButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPointButtonActionPerformed
        jImageInternalWindow vi;
        if (this.jDesktopPane.getSelectedFrame() instanceof jImageInternalWindow) {
            vi = (jImageInternalWindow) this.jDesktopPane.getSelectedFrame();
            vi.getImagePanel().setCurrentForm(Shapes.POINT);
        }
    }//GEN-LAST:event_jPointButtonActionPerformed

    private void jLineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jLineButtonActionPerformed
        jImageInternalWindow vi;
        if (this.jDesktopPane.getSelectedFrame() instanceof jImageInternalWindow) {
            vi = (jImageInternalWindow) this.jDesktopPane.getSelectedFrame();
            vi.getImagePanel().setCurrentForm(Shapes.LINE);
        }
    }//GEN-LAST:event_jLineButtonActionPerformed

    private void jRectangleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRectangleButtonActionPerformed
        jImageInternalWindow vi;
        if (this.jDesktopPane.getSelectedFrame() instanceof jImageInternalWindow) {
            vi = (jImageInternalWindow) this.jDesktopPane.getSelectedFrame();
            vi.getImagePanel().setCurrentForm(Shapes.RECTANGLE);
        }
    }//GEN-LAST:event_jRectangleButtonActionPerformed

    private void jFreePathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFreePathButtonActionPerformed
        jImageInternalWindow vi;
        if (this.jDesktopPane.getSelectedFrame() instanceof jImageInternalWindow) {
            vi = (jImageInternalWindow) this.jDesktopPane.getSelectedFrame();
            vi.getImagePanel().setCurrentForm(Shapes.FREEFORM);
        }
    }//GEN-LAST:event_jFreePathButtonActionPerformed

    private void jEllipseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEllipseButtonActionPerformed
        jImageInternalWindow vi;
        if (this.jDesktopPane.getSelectedFrame() instanceof jImageInternalWindow) {
            vi = (jImageInternalWindow) this.jDesktopPane.getSelectedFrame();
            vi.getImagePanel().setCurrentForm(Shapes.ELLIPSE);
        }
    }//GEN-LAST:event_jEllipseButtonActionPerformed

    private void jContinuityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jContinuityButtonActionPerformed
        jImageInternalWindow vi;
        if (this.jDesktopPane.getSelectedFrame() instanceof jImageInternalWindow) {
            vi = (jImageInternalWindow) this.jDesktopPane.getSelectedFrame();
            vi.getImagePanel().setIsCont(true);
        }
    }//GEN-LAST:event_jContinuityButtonActionPerformed

    private void jDiscontinuityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDiscontinuityButtonActionPerformed
        jImageInternalWindow vi;
        if (this.jDesktopPane.getSelectedFrame() instanceof jImageInternalWindow) {
            vi = (jImageInternalWindow) this.jDesktopPane.getSelectedFrame();
            vi.getImagePanel().setIsCont(false);
        }
    }//GEN-LAST:event_jDiscontinuityButtonActionPerformed

    private void jSolidFillRadioButtonItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_jSolidFillRadioButtonItemStateChanged
        jImageInternalWindow vi;
        if (this.jDesktopPane.getSelectedFrame() instanceof jImageInternalWindow) {
            vi = (jImageInternalWindow) this.jDesktopPane.getSelectedFrame();
            if (vi != null) {
                if (evt.getStateChange() == ItemEvent.SELECTED) {
                    vi.getImagePanel().setIsShapeFilled(true);
                }
            }
        }
    }//GEN-LAST:event_jSolidFillRadioButtonItemStateChanged

    private void jNoFillRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNoFillRadioButtonActionPerformed
        jImageInternalWindow vi;
        if (this.jDesktopPane.getSelectedFrame() instanceof jImageInternalWindow) {
            vi = (jImageInternalWindow) this.jDesktopPane.getSelectedFrame();
            vi.getImagePanel().setIsShapeFilled(false);
        }
    }//GEN-LAST:event_jNoFillRadioButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jMainFrame().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem jAboutMenuItem;
    private javax.swing.JPanel jAttributesPanel;
    private javax.swing.JButton jBlackColorButton;
    private javax.swing.JButton jBlueColorButton;
    private javax.swing.JSlider jBrightnessSlider;
    private javax.swing.JMenu jCameraMenu;
    private javax.swing.JMenuItem jCameraMenuItem;
    private javax.swing.JMenuItem jCaptureMenuItem;
    private javax.swing.JPanel jCentralPanel;
    private javax.swing.ButtonGroup jColorPaletteGroup;
    private javax.swing.JPanel jColorPanel;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.ButtonGroup jConitnuityGroup;
    private javax.swing.JRadioButton jContinuityButton;
    private javax.swing.JButton jDarknessButton;
    private javax.swing.JDesktopPane jDesktopPane;
    private javax.swing.JRadioButton jDiscontinuityButton;
    private javax.swing.JToolBar jDrawingToolBar;
    private javax.swing.JCheckBox jEditCheckBox;
    private javax.swing.JButton jEllipseButton;
    private javax.swing.JMenuItem jExitMenuItem;
    private javax.swing.JMenu jFileMenu;
    private javax.swing.ButtonGroup jFillButtonGroup;
    private javax.swing.JPanel jFillPanel;
    private javax.swing.JButton jFreePathButton;
    private javax.swing.JRadioButton jGradientFillRadioButton;
    private javax.swing.JButton jGrayColorButton;
    private javax.swing.JButton jGreenColorButton;
    private javax.swing.JButton jIlluminationButton;
    private javax.swing.JPanel jImageManipulationPanel;
    private javax.swing.JCheckBoxMenuItem jImageOpMenuItem;
    private javax.swing.JMenu jInfoMenu;
    private javax.swing.JButton jLineButton;
    private javax.swing.JPanel jLowerPanel;
    private javax.swing.JPanel jLowestPanel;
    private javax.swing.JMenuBar jMenuBar;
    private javax.swing.JMenuItem jNewMenuItem;
    private javax.swing.JButton jNinetyDegRotationButton;
    private javax.swing.JRadioButton jNoFillRadioButton;
    private javax.swing.JButton jNormalContrastButton;
    private javax.swing.JButton jOneEightyDegRotationButton;
    private javax.swing.JMenuItem jOpenMenuItem;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JButton jPointButton;
    private javax.swing.JPanel jPropertiesPanel;
    private javax.swing.JMenuItem jRecordMenuItem;
    private javax.swing.JButton jRectangleButton;
    private javax.swing.JButton jRedColorButton;
    private javax.swing.JSlider jRotationSlider;
    private javax.swing.JMenuItem jSaveMenuItem;
    private javax.swing.JPanel jShapeFormPanel;
    private javax.swing.ButtonGroup jShapePaintGroup;
    private javax.swing.JRadioButton jSolidFillRadioButton;
    private javax.swing.JPanel jStrokePanel;
    private javax.swing.JSpinner jStrokeSpinner;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton jTwoSeventyDegRotationButton;
    private javax.swing.JCheckBoxMenuItem jViewFormsMenuItem;
    private javax.swing.JMenu jViewMenu;
    private javax.swing.JButton jYellowColorButton;
    private javax.swing.JButton jZoomInButton;
    private javax.swing.JButton jZoomOutButton;
    // End of variables declaration//GEN-END:variables
}
